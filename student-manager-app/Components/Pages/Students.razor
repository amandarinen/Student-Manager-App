@page "/students"
@rendermode InteractiveServer

<PageTitle>Student Manager</PageTitle>

<h1>Student Manager</h1>

<!-- Formulär för att lägga till student -->
<form @onsubmit="AddStudent" @onsubmit:preventDefault>
    <label for="name">Name:</label>
    <input type="text" id="name" @bind="newStudent.Name" required />
    <label for="grade">Grade:</label>
    <input type="number" id="grade" @bind="newStudent.Grade" required />
    <button type="submit" class="btn btn-primary">Add student</button>
</form>

<br />


<br /><br />

<!-- Sorteringsknappar -->
<button type="button" @onclick="SortByName">Sort by name</button>
<button type="button" @onclick="SortByGrade">Sort by grade</button>




<br /><br />

<!-- Tabell som visar studenter -->
<table class="table">
    <thead>
    <tr>
        <th>Name</th>
        <th>Grade</th>
        <th>Delete</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var student in SortedFilteredStudents)
    {
        <tr>
            <td>@student.Name</td>
            <td>@student.Grade</td>
            <td>
                <!-- Raderaknapp för varje student -->
                <button @onclick="() => DeleteStudent(student)">Radera</button>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    // Lista med alla studenter
    private List<Student> students = new();
    // Student som fylls i via formuläret
    private Student newStudent = new();
    // Filter för namn
    private string filterName = "";
    // Filter för betyg
    private int? filterGrade = null;

    // Sorteringsinställningar
    private string sortBy = "Name";
    private bool sortAsc = true;

    // Lägger till en ny student i listan
    private void AddStudent()
    {
        students.Add(new Student { Name = newStudent.Name, Grade = newStudent.Grade });
        newStudent = new Student();
    }

    // Tar bort en student från listan
    private void DeleteStudent(Student student)
    {
        students.Remove(student);
    }

    // Ändrar sorteringsfält och riktning
    private void SortBy(string property)
    {
        if (sortBy == property)
            sortAsc = !sortAsc;
        else
        {
            sortBy = property;
            sortAsc = true;
        }
    }

    private void SortByName() => SortBy("Name");
    private void SortByGrade() => SortBy("Grade");

    // Returnerar filtrerade och sorterade studenter
    private IEnumerable<Student> SortedFilteredStudents
    {
        get
        {
            var filtered = FilteredStudents;
            return sortBy switch
            {
                "Name" => sortAsc
                    ? filtered.OrderBy(s => s.Name)
                    : filtered.OrderByDescending(s => s.Name),
                "Grade" => sortAsc
                    ? filtered.OrderBy(s => s.Grade)
                    : filtered.OrderByDescending(s => s.Grade),
                _ => filtered
            };
        }
    }

    // Returnerar studenter som matchar filter
    private IEnumerable<Student> FilteredStudents =>
        students.Where(s =>
            (string.IsNullOrWhiteSpace(filterName) || s.Name.Contains(filterName, StringComparison.OrdinalIgnoreCase)) &&
            (!filterGrade.HasValue || s.Grade == filterGrade.Value)
        );

    // Klass för student
    private class Student
    {
        public string Name { get; set; } = "";
        public int Grade { get; set; }
    }

}
